// Generated by LiveScript 1.2.0
var main;
main = function($scope, $interval){
  var mapOption, mapStyle, map, overlay;
  mapOption = {
    center: new google.maps.LatLng(23.624146, 120.320623),
    zoom: 7,
    minZoom: 7,
    maxZoom: 18,
    mapTypeId: google.maps.MapTypeId.ROADMAP,
    panControlOptions: {
      position: google.maps.ControlPosition.LEFT_CENTER
    },
    zoomControlOptions: {
      position: google.maps.ControlPosition.LEFT_CENTER
    },
    mapTypeControlOptions: {
      position: google.maps.ControlPosition.LEFT_CENTER
    }
  };
  mapStyle = [
    {
      "featureType": "road",
      "stylers": [{
        "saturation": -100
      }]
    }, {
      "featureType": "poi",
      "stylers": [{
        "saturation": -100
      }]
    }, {
      "featureType": "transit",
      "stylers": [{
        "saturation": -100
      }]
    }
  ];
  map = new google.maps.Map(document.getElementById('mainmap'), mapOption);
  map.set('styles', mapStyle);
  overlay = import$(new google.maps.OverlayView(), {
    info: {},
    onAdd: function(){
      var this$ = this;
      this.root = this.getPanes().overlayLayer;
      this.svg = d3.select(this.root).append('svg').attr({
        width: "1400px",
        height: "1200px",
        "viewBox": "0 0 1400 1200"
      });
      this.svg.style({
        position: "absolute"
      });
      this.info.prj = d3.geo.mercator().center([120.3202, 22.7199]).scale(335000);
      this.info.path = d3.geo.path().projection(this.info.prj);
      return d3.json('sample.json', function(json){
        var x$;
        this$.data = json.map(function(it){
          return {
            year: it[0],
            name: it[1],
            loc: new google.maps.LatLng(it[4], it[5]),
            casualty: parseInt(it[2]) + parseInt(it[3])
          };
        });
        x$ = this$.svg.selectAll('circle').data(this$.data);
        x$.enter().append('circle');
        this$.svg.selectAll('text').data(this$.data).enter().append('text');
        this$.svg.selectAll('circle').attr({
          cx: 1,
          cy: 1,
          r: 1,
          fill: 'rgba(255,128,64,0.5)',
          stroke: 'rgba(128,64,32,1)',
          "stroke-width": '1.5px',
          opacity: 0.9
        });
        return overlay.draw();
      });
    },
    ll2p: function(lat, lng, prj){
      var ret;
      return ret = prj.fromLatLngToDivPixel(new google.maps.LatLng(lat, lng));
    },
    bound2p: function(bound){
      var prj, ne, sw, p1, p2;
      prj = this.getProjection();
      ne = bound.getNorthEast();
      sw = bound.getSouthWest();
      p1 = this.ll2p(ne.lat(), sw.lng(), prj);
      p2 = this.ll2p(sw.lat(), ne.lng(), prj);
      return [p1, p2];
    },
    tick: 0,
    draw: function(){
      var prj, ref$, p1, p2, w, h, b1, b2, now, nowt, this$ = this;
      prj = this.getProjection();
      ref$ = this.bound2p(map.getBounds()), p1 = ref$[0], p2 = ref$[1];
      ref$ = [p2.x - p1.x, p2.y - p1.y], w = ref$[0], h = ref$[1];
      b1 = this.ll2p(22.7595, 120.23795080859372, prj);
      b2 = this.ll2p(22.5698, 120.409450, prj);
      now = this.svg.selectAll('circle').filter(function(d, i){
        return i === this$.tick;
      });
      nowt = this.svg.selectAll('text').filter(function(d, i){
        return i === this$.tick;
      });
      if (overlay.data) {
        this.tick = (this.tick + 1) % overlay.data.length;
      }
      now.attr({
        cx: function(d, i){
          var v;
          v = this$.ll2p(d.loc.lat(), d.loc.lng(), prj);
          return v.x;
        },
        cy: function(d, i){
          var v;
          v = this$.ll2p(d.loc.lat(), d.loc.lng(), prj);
          return v.y;
        },
        r: function(){
          return 10;
        },
        opacity: 1
      });
      nowt.attr({
        x: 100,
        y: 60,
        opacity: 1,
        "dominant-baseline": "central",
        "font-size": function(d, i){
          var ref$, ref1$;
          return (ref$ = (ref1$ = Math.sqrt(d.casualty) * 3) > 20 ? ref1$ : 20) < 60 ? ref$ : 60;
        }
      }).text(function(it){
        return it.year + " " + it.name;
      });
      now.transition().ease('cubic-out').duration(1000).attr({
        opacity: 0.5,
        r: function(d, i){
          return 10 + 7 * (d.casualty - 10) / 8;
        }
      }).transition().ease('linear').duration(2000).attr({
        opacity: 0.0,
        r: function(d, i){
          return d.casualty;
        }
      });
      return nowt.transition().duration(2000).attr({
        y: 400,
        opacity: 0.6
      }).transition().duration(1000).attr({
        opacity: 0
      });
    }
  });
  overlay.setMap(map);
  return $interval(function(){
    return overlay.draw();
  }, 500);
};
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}