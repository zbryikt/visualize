// Generated by LiveScript 1.2.0
var main;
main = function($scope, $interval, $http){
  var mapOption, mapBound, boundPtrs, simdate, mapStyle, map, overlay;
  mapOption = {
    center: new google.maps.LatLng(23.624146, 120.320623),
    zoom: 9,
    minZoom: 7,
    maxZoom: 18,
    mapTypeId: google.maps.MapTypeId.ROADMAP,
    panControl: false,
    scaleControl: false,
    mapTypeControl: false,
    streetviewControl: false,
    zoomControlOptions: {
      position: google.maps.ControlPosition.RIGHT_CENTER
    }
  };
  mapBound = new google.maps.LatLngBounds();
  boundPtrs = [[25.471911, 119.455903], [21.707318, 122.356293]];
  boundPtrs.map(function(it){
    return new google.maps.LatLng(it[0], it[1]);
  }).map(function(it){
    return mapBound.extend(it);
  });
  simdate = function(date){
    return date.getYear() + 1900;
  };
  mapStyle = [
    {
      "featureType": "water",
      "stylers": [
        {
          "hue": '#1900ff'
        }, {
          "lightness": -86
        }, {
          "saturation": -80
        }
      ]
    }, {
      "featureType": "landscape",
      "stylers": [
        {
          "lightness": -47
        }, {
          "hue": '#dd3d00'
        }, {
          "saturation": -80
        }
      ]
    }, {
      "featureType": "poi",
      "stylers": [
        {
          "saturation": -100
        }, {
          "lightness": -30
        }
      ]
    }, {
      "featureType": "road",
      "stylers": [
        {
          "weight": 0.3
        }, {
          "saturation": -48
        }, {
          "lightness": -0
        }, {
          "hue": '#dd4400'
        }
      ]
    }
  ];
  map = new google.maps.Map(document.getElementById('mainmap'), mapOption);
  map.set('styles', mapStyle);
  map.fitBounds(mapBound);
  google.maps.event.addDomListener(window, 'resize', function(){
    var ref$, w, h, b, lat1, lng1, lat2, lng2, prj, b1, b2;
    ref$ = [$('#mainmap').width(), $('#mainmap').height()], w = ref$[0], h = ref$[1];
    map.fitBounds(mapBound);
    b = map.getBounds();
    ref$ = [b.getNorthEast().lat(), b.getSouthWest().lng()], lat1 = ref$[0], lng1 = ref$[1];
    ref$ = [b.getSouthWest().lat(), b.getNorthEast().lng()], lat2 = ref$[0], lng2 = ref$[1];
    prj = overlay.getProjection();
    if (!prj) {
      return;
    }
    b1 = overlay.ll2p(lat1, lng1, prj);
    b2 = overlay.ll2p(lat2, lng2, prj);
    w = b2.x - b1.x;
    h = b2.y - b1.y;
    return overlay.resize();
  });
  google.maps.event.addListener(map, 'zoom_changed', function(){
    return overlay.resize();
  });
  overlay = import$(new google.maps.OverlayView(), {
    info: {},
    onAdd: function(){
      var ref$, w, h;
      this.root = d3.select(this.getPanes().overlayLayer);
      ref$ = [$('#mainmap').width(), $('#mainmap').height()], w = ref$[0], h = ref$[1];
      /*.attr do
        width: "200px"
        height: "20px"
        viewBox: "0 0 200 20"
      */
      /*@axis.append \rect .attr do
        width: \200
        height: \20
        fill: \#f00
        x: \0
        y: \0
      */
      /*@svg = d3.select @root .append \svg .attr do
        width: "#{w}px"
        height: "#{h}px"
        "viewBox": "0 0 #{w} #{h}"
      @svg.style do
        position: "absolute"*/
      this.info.prj = d3.geo.mercator().center([120.3202, 22.7199]).scale(335000);
      this.info.path = d3.geo.path().projection(this.info.prj);
      return $http({
        url: 'https://spreadsheets.google.com/feeds/list/1p0DNKBt4oNfDBgHv4ZXH-vu0bJ_PtxFFXCL7o4O_Cxo/1/public/values?alt=json',
        method: 'GET'
      }).success(function(d){
        var data;
        data = d.feed.entry.map(function(it){
          var date, ret, casualty, lat, lng, name, loc;
          date = it.gsx$日期.$t.replace(/[年月]/g, '/');
          date = date.replace(/[日]/g, '');
          date = new Date(date);
          ret = /(?:(\d+)死)?(?:(\d+)傷)?(?:(\d+)生還)?/.exec(it.gsx$死傷.$t);
          casualty = {
            die: parseInt((ret && ret[1]) || 0),
            hurt: parseInt((ret && ret[2]) || 0),
            live: parseInt((ret && ret[3]) || 0)
          };
          casualty.total = casualty.die + casualty.hurt;
          casualty.radius = parseInt(Math.sqrt(casualty.total));
          lat = parseFloat(it.gsx$緯度.$t || 0);
          lng = parseFloat(it.gsx$經度.$t || 0);
          name = (it.gsx$短名.$t || it.gsx$事件.$t).trim();
          loc = new google.maps.LatLng(lat, lng);
          return {
            name: name,
            date: date,
            casualty: casualty,
            lat: lat,
            lng: lng,
            loc: loc
          };
        });
        data = data.filter(function(it){
          return it.lat && it.lng && it.casualty.total;
        });
        return overlay.initNode(data);
      });
    },
    initNode: function(data){
      var x$;
      this.data = data;
      x$ = this.root.selectAll('svg').data(this.data);
      x$.enter().append('svg').append('circle');
      this.root.selectAll('svg').style({
        position: 'absolute'
      });
      return this.root.selectAll("svg circle").attr({
        cx: 0,
        cy: 0,
        r: 0,
        fill: 'rgba(255,128,64,0.3)',
        stroke: 'rgba(255,0,0,1)',
        "stroke-width": '2.5px',
        opacity: 0.9
      });
    },
    ll2p: function(lat, lng, prj){
      var ret;
      return ret = prj.fromLatLngToDivPixel(new google.maps.LatLng(lat, lng));
    },
    bound2p: function(bound){
      var prj, ne, sw, p1, p2;
      prj = this.getProjection();
      ne = bound.getNorthEast();
      sw = bound.getSouthWest();
      p1 = this.ll2p(ne.lat(), sw.lng(), prj);
      p2 = this.ll2p(sw.lat(), ne.lng(), prj);
      return [p1, p2];
    },
    tick: 0,
    resize: function(){
      var prj, ref$, p1, p2, ne, sw, cr, z, w, h, x$, this$ = this;
      if (!map || !map.getBounds()) {
        return;
      }
      prj = this.getProjection();
      if (!prj) {
        return;
      }
      ref$ = this.bound2p(map.getBounds()), p1 = ref$[0], p2 = ref$[1];
      ne = map.getBounds().getNorthEast();
      sw = map.getBounds().getSouthWest();
      cr = 0.1 * (p2.x - p1.x) / (ne.lng() - sw.lng());
      z = map.getZoom();
      ref$ = [p2.x - p1.x, p2.y - p1.y], w = ref$[0], h = ref$[1];
      x$ = this.root.selectAll('svg');
      x$.attr({
        width: function(d, i){
          return cr * d.casualty.radius * 2 + "px";
        },
        height: function(d, i){
          return cr * d.casualty.radius * 2 + "px";
        },
        viewBox: function(d, i){
          var L;
          L = parseInt(cr * d.casualty.radius * 2);
          return "0 0 " + L + " " + L;
        }
      });
      x$.style({
        top: function(d, i){
          var v;
          v = this$.ll2p(d.loc.lat(), d.loc.lng(), prj);
          return parseInt(v.y - cr * d.casualty.radius) + "px";
        },
        left: function(d, i){
          var v;
          v = this$.ll2p(d.loc.lat(), d.loc.lng(), prj);
          return parseInt(v.x - cr * d.casualty.radius) + "px";
        }
      });
      x$.select('circle').attr({
        r: function(d, i){
          if (i <= this$.tick && i >= this$.tick - 4) {
            return cr * d.casualty.radius * 0.9;
          }
          return 0;
        },
        cx: function(d, i){
          return cr * d.casualty.radius;
        },
        cy: function(d, i){
          return cr * d.casualty.radius;
        }
      });
      return x$;
    },
    draw: function(){
      var prj, ref$, p1, p2, w, h, ne, sw, cr, now, x$, this$ = this;
      if (!map || !map.getBounds()) {
        return;
      }
      prj = this.getProjection();
      if (!prj) {
        return;
      }
      ref$ = this.bound2p(map.getBounds()), p1 = ref$[0], p2 = ref$[1];
      ref$ = [p2.x - p1.x, p2.y - p1.y], w = ref$[0], h = ref$[1];
      ne = map.getBounds().getNorthEast();
      sw = map.getBounds().getSouthWest();
      cr = 0.1 * w / (ne.lng() - sw.lng());
      now = this.root.selectAll('svg').filter(function(d, i){
        return i === this$.tick;
      });
      if (overlay.data) {
        this.tick = (this.tick + 1) % overlay.data.length;
      }
      now.each(function(it){
        return $scope.name = (1900 + it.date.getYear()) + "/" + (it.date.getMonth() + 1) + " " + it.name + " / " + it.casualty.die + "死 " + it.casualty.hurt + "傷";
      });
      now.each(function(it){
        return console.log(it);
      });
      x$ = now;
      x$.attr({
        width: function(d, i){
          return cr * d.casualty.radius * 2 + "px";
        },
        height: function(d, i){
          return cr * d.casualty.radius * 2 + "px";
        },
        viewBox: function(d, i){
          var L;
          L = parseInt(cr * d.casualty.radius * 2);
          return "0 0 " + L + " " + L;
        }
      });
      x$.style({
        top: function(d, i){
          var v;
          v = this$.ll2p(d.loc.lat(), d.loc.lng(), prj);
          return parseInt(v.y - cr * d.casualty.radius) + "px";
        },
        left: function(d, i){
          var v;
          v = this$.ll2p(d.loc.lat(), d.loc.lng(), prj);
          return parseInt(v.x - cr * d.casualty.radius) + "px";
        }
      });
      x$.select('circle').attr({
        cx: function(d, i){
          return cr * d.casualty.radius;
        },
        cy: function(d, i){
          return cr * d.casualty.radius;
        },
        r: function(d, i){
          return 0;
        },
        opacity: 1
      }).transition().ease('cubic-out').duration(1000).attr({
        opacity: 0.5,
        r: function(d, i){
          return cr * d.casualty.radius * 0.9;
        }
      }).transition().ease('linear').duration(1000).attr({
        opacity: 0.0
      });
      return x$;
    }
  });
  overlay.setMap(map);
  return $interval(function(){
    return overlay.draw();
  }, 500);
};
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}