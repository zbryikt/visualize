// Generated by LiveScript 1.2.0
var main;
main = function($scope){
  var mapOption, mapStyle, map, overlay;
  mapOption = {
    center: new google.maps.LatLng(22.624146, 120.320623),
    zoom: 13,
    minZoom: 8,
    maxZoom: 18,
    mapTypeId: google.maps.MapTypeId.ROADMAP,
    panControlOptions: {
      position: google.maps.ControlPosition.LEFT_CENTER
    },
    zoomControlOptions: {
      position: google.maps.ControlPosition.LEFT_CENTER
    },
    mapTypeControlOptions: {
      position: google.maps.ControlPosition.LEFT_CENTER
    }
  };
  mapStyle = [
    {
      "featureType": "road",
      "stylers": [{
        "saturation": -100
      }]
    }, {
      "featureType": "poi",
      "stylers": [{
        "saturation": -100
      }]
    }, {
      "featureType": "transit",
      "stylers": [{
        "saturation": -100
      }]
    }
  ];
  map = new google.maps.Map(document.getElementById('mainmap'), mapOption);
  map.set('styles', mapStyle);
  overlay = import$(new google.maps.OverlayView(), {
    info: {},
    onAdd: function(){
      var this$ = this;
      this.root = this.getPanes().overlayLayer;
      this.svg = d3.select(this.root).append('svg').attr({
        width: "1000px",
        height: "1200px",
        "viewBox": "0 0 1000 1200"
      });
      this.svg.style({
        position: "absolute"
      });
      this.info.prj = d3.geo.mercator().center([120.3202, 22.7199]).scale(335000);
      this.info.path = d3.geo.path().projection(this.info.prj);
      this.color = ['#f90', '#f00', '#0f0', '#09f', '#00f', '#f0f', '#f00'];
      this.opacity = function(){
        var z;
        z = map.getZoom();
        if (z >= 16) {
          return 0.3;
        }
        if (z >= 14) {
          return 0.5;
        }
        if (z >= 12) {
          return 0.7;
        }
        if (z <= 11) {
          return 1;
        }
      };
      this.strokeWidth = function(){
        var z;
        z = map.getZoom();
        if (z >= 16) {
          return "5";
        }
        if (z >= 14) {
          return "7";
        }
        if (z >= 12) {
          return "9";
        }
        if (z <= 11) {
          return "11";
        }
      };
      return d3.json('json/index.json', function(list){
        var _, i$, len$, i, ref$, k, n, results$ = [];
        $scope.$apply(function(){
          return $scope.maplist = (list.concat([['all', 'å…¨éƒ¨']])).map(function(d, i){
            return d.concat([this$.color[i]]);
          });
        });
        _ = function(k, n, i){
          return d3.json("json/" + k + ".geojson", function(json){
            var x$, y$;
            this$.svg.append('g').attr('class', k).style('opacity', function(){
              if ($scope.showmode === k || $scope.showmode === 'all') {
                return 1;
              } else {
                return 0;
              }
            });
            x$ = this$.svg.select("g." + k).selectAll("path." + k).data(json.features);
            y$ = x$.enter().append('path');
            y$.attr({
              'class': k,
              d: this$.info.path,
              stroke: this$.color[i],
              opacity: this$.opacity,
              "stroke-width": this$.strokeWidth,
              "stroke-linejoin": 'round',
              fill: 'none'
            });
            return this$.info.nodes = this$.svg.selectAll('path');
          });
        };
        for (i$ = 0, len$ = list.length; i$ < len$; ++i$) {
          i = i$;
          ref$ = list[i$], k = ref$[0], n = ref$[1];
          results$.push(_(k, n, i));
        }
        return results$;
      });
    },
    ll2p: function(lat, lng, prj){
      var ret;
      return ret = prj.fromLatLngToDivPixel(new google.maps.LatLng(lat, lng));
    },
    bound2p: function(bound){
      var prj, ne, sw, p1, p2;
      prj = this.getProjection();
      ne = bound.getNorthEast();
      sw = bound.getSouthWest();
      console.log(sw.lng(), ne.lat());
      console.log(ne.lng(), sw.lat());
      p1 = this.ll2p(ne.lat(), sw.lng(), prj);
      p2 = this.ll2p(sw.lat(), ne.lng(), prj);
      return [p1, p2];
    },
    draw: function(){
      var prj, ref$, p1, p2, w, h, b1, b2;
      prj = this.getProjection();
      ref$ = this.bound2p(map.getBounds()), p1 = ref$[0], p2 = ref$[1];
      ref$ = [p2.x - p1.x, p2.y - p1.y], w = ref$[0], h = ref$[1];
      b1 = this.ll2p(22.7595, 120.23795080859372, prj);
      b2 = this.ll2p(22.5698, 120.409450, prj);
      this.svg.style({
        left: b1.x + "px",
        top: b1.y + "px"
      });
      this.svg.attr({
        width: (b2.x - b1.x) + "px",
        height: (b2.y - b1.y) + "px"
      });
      return this.svg.selectAll('path').attr({
        "opacity": this.opacity,
        "stroke-width": this.strokeWidth
      });
    }
  });
  overlay.setMap(map);
  $scope.showmode = 'all';
  return $scope.$watch('showmode', function(v){
    var i$, ref$, len$, ref1$, k, n, results$ = [];
    if (overlay.svg && v) {
      console.log($scope.showmode, v);
      for (i$ = 0, len$ = (ref$ = $scope.maplist).length; i$ < len$; ++i$) {
        ref1$ = ref$[i$], k = ref1$[0], n = ref1$[1];
        results$.push(overlay.svg.select("g." + k).style('opacity', fn$));
      }
      return results$;
    }
    function fn$(){
      if (v === k || v === 'all') {
        return 1;
      } else {
        return 0;
      }
    }
  });
};
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}